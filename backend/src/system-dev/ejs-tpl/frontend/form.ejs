<template>
  <el-dialog
    v-model="show"
    :title="title"
    :close-on-press-escape="false"
    :close-on-click-modal="false"
    width="70%"
    @closed="close(<%=getSmallModuleTitle(moduleConf.nameEn) %>FormRef)"
  >
    <el-form 
      :model="form" 
      label-width="120px" 
      :rules="rules" 
      ref="<%=getSmallModuleTitle(moduleConf.nameEn) %>FormRef"
    ><% for(let i=0;i<fieldList.length;i++) {%>
      <el-form-item label="<%=fieldList[i].name %>:" prop="<%=fieldList[i].nameEn %>">
        <%- include(DomConf(fieldList[i]).tpl, DomConf(fieldList[i])) %>
      </el-form-item><%} %>
    </el-form>
    <template #footer>
      <span class="dialog-footer">
        <el-button 
          v-loading="saveLoading"
          v-if="btnShow('save-<%=getSmallModuleTitle(moduleConf.nameEn) %>')"
          type="primary" 
          @click="save(<%=getSmallModuleTitle(moduleConf.nameEn) %>FormRef)"
        >
          {{form._id ? "更新" : "保存"}}
        </el-button>
      </span>
    </template>
  </el-dialog>
</template>
<script lang="ts" setup>
import { ref, reactive, <%if(fieldList.filter(item => item.dom == 'MoreText').length) {%> onBeforeUnmount, shallowRef <%}%>} from "vue";
import axios from "axios";
import { btnShow } from "@/utils/buttonShow";
import { getToken } from "@/utils/authTokenUtil";
import { viewIcon } from "@/utils/enum/iconBase64";
import { alertSuccess,alertWarning } from "@/utils/message";<%if(fieldList.filter(item => item.dom == 'MoreText').length) {%>
import "@wangeditor/editor/dist/css/style.css";
import { Editor, Toolbar } from "@wangeditor/editor-for-vue";
import type { IDomEditor } from "@wangeditor/editor";
import { MENU_CONF } from "@/common/EditorConfig";
<%}%><%if(fieldList.filter(item=>["MoreSelect","Select","Radio","Checkbox","AdministrativeDivision"].includes(item.dom)).length) {%>
import { AdministrativeDivisionsControllerGetListByDicClass } from "@/api/AdministrativeDivisionsControllerApi";
import { SelectDto } from '@/common/CommonDto';<%}%>
import {
  <%=getBigModuleTitle(moduleConf.nameEn) %>ControllerCreate,
  <%=getBigModuleTitle(moduleConf.nameEn) %>ControllerGetDetailById,
  <%=getBigModuleTitle(moduleConf.nameEn) %>ControllerUpdate,
} from "@/api/<%=getBigModuleTitle(moduleConf.nameEn) %>ControllerApi";
import type {
  
   FormInstance,
   CascaderProps,
   FormRules,<%if(fieldList.filter(item=>["Image","File"].includes(item.dom)).length) {%>
   UploadFile,
   UploadUserFile,<%}%>
} from "element-plus";
import { ExpandTrigger } from "element-plus";
import { <%=getBigModuleTitle(moduleConf.nameEn) %>Dto } from "@/api/dto/<%=getBigModuleTitle(moduleConf.nameEn) %>Dto";
const emit = defineEmits(["Refresh"]);
const show = ref(false);
const title = ref("添加<%=moduleConf.name%>")
const form = ref(new <%=getBigModuleTitle(moduleConf.nameEn) %>Dto());
const <%=getSmallModuleTitle(moduleConf.nameEn) %>FormRef = ref<FormInstance>();
const rules = reactive<FormRules>({
  <% for(let i=0;i<fieldList.length;i++) { if(fieldList[i].notNull) {%>
  <%=fieldList[i].nameEn %>: [
    { required: true, message: "<%=fieldList[i].name %>不能为空", trigger: "blur" },
  ],<%} else {%><%=fieldList[i].nameEn %>: [],
  <%}}%>});
const open = (item: <%=getBigModuleTitle(moduleConf.nameEn) %>Dto)=>{
  show.value = true;
  if( item?._id ) {
    title.value = "编辑<%=moduleConf.name%>";
    getDetail(item._id);
  } else {
    title.value = "添加<%=moduleConf.name%>";<% for(let i=0;i<fieldList.length;i++) { if(fieldList[i].defaultValue){%>
    form.value.<%=fieldList[i].nameEn %> = <%if(fieldList[i].type=='string'){%>"<%}%><%=fieldList[i].defaultValue%><%if(fieldList[i].type=='string'){%>"<%}%>
    <%if(["Select","Radio"].includes(fieldList[i].dom)){%><%=fieldList[i].nameEn %>SelectChange(<%if(fieldList[i].type=='string'){%>"<%}%><%=fieldList[i].defaultValue%><%if(fieldList[i].type=='string'){%>"<%}%>)<%}}}%>
  }
}
<% for(let i=0;i<fieldList.length;i++) {%><%- include(DomEventConf(fieldList[i]).tpl, DomEventConf(fieldList[i])) %><%} %>
const getDetail = async (id: string) => {
  const {
    data: { status, data, message}
  } = await <%=getBigModuleTitle(moduleConf.nameEn) %>ControllerGetDetailById(id);
  if (status === 1) {
      form.value = data;
      initOtherValue(data);
    }else{
      alertWarning(message);
    }
};
const initOtherValue = (data: <%=getBigModuleTitle(moduleConf.nameEn) %>Dto) => {
  console.log(data);
  <% for(let i=0;i<fieldList.length;i++) {%>
    <%if(["MoreTreeSelect","AdministrativeDivision"].includes(fieldList[i].dom)){%>
    if(data.<%=fieldList[i].nameEn %>) {
      <%=fieldList[i].nameEn %>TreeValue.value = data.<%=fieldList[i].nameEn %>.split(",");
    } else {
      <%=fieldList[i].nameEn %>TreeValue.value = []
    }
    <%}%>
    <%if(fieldList[i].dom=='Checkbox'){%>
    if(data.<%=fieldList[i].nameEn %>) {
      <%=fieldList[i].nameEn %>CheckboxValue.value = data.<%=fieldList[i].nameEn %>.split(",");
    } else {
      <%=fieldList[i].nameEn %>CheckboxValue.value = []
    }
    <%}%>
    <%if(fieldList[i].dom=='MoreSelect'){%>
    if(data.<%=fieldList[i].nameEn %>) {
      <%=fieldList[i].nameEn %>SelectValue.value = data.<%=fieldList[i].nameEn %>.split(",");
    } else {
      <%=fieldList[i].nameEn %>SelectValue.value = []
    }
    <%}%>
    <%if(fieldList[i].dom=='MoreText'){%>
      if (data.<%=fieldList[i].nameEn %>) {
        <%=fieldList[i].nameEn %>EditorRef.value?.setHtml(data.<%=fieldList[i].nameEn %>);
      }else{
        <%=fieldList[i].nameEn %>EditorRef.value?.setHtml("");
      }
    <%}%>
    <%if(['File','Image'].includes(fieldList[i].dom)){%>
    if(data.<%=fieldList[i].nameEn %>) {
      const <%=fieldList[i].nameEn %>FileArr = data.<%=fieldList[i].nameEn %>.split(";");
      <%=fieldList[i].nameEn %>FileArr.map(item => {
        if (item) {
          let [name,url] = item.split(",");
          url = "/api" + url;
          <%=fieldList[i].nameEn %>FileList.value.push({ name, url });
        }
      })
    } else {
      <%=fieldList[i].nameEn %>FileList.value = [];
    }<%}%><%}%>
}
const saveLoading = ref(false);
const save = async (formEl: FormInstance | undefined) => {
  if (!formEl) return;
  await formEl.validate(async (valid, fields) => {
    if (valid) {
      saveLoading.value = true;
      const {
        data: { status, message },
      } = form.value._id
      ? await <%=getBigModuleTitle(moduleConf.nameEn) %>ControllerUpdate(form.value._id, form.value)
      : await <%=getBigModuleTitle(moduleConf.nameEn) %>ControllerCreate(form.value);
      saveLoading.value = false;
      if (status === 1) {
        alertSuccess("成功");
        if (!form.value?._id) {
          show.value = false;
        }
        emit("Refresh");
      } else {
        alertWarning(message);
      }
    } else {
      alertWarning('表单校验未通过，请根据提示重新填写')
    }
  });
};

const close = (formEl: FormInstance | undefined) => {
  if (!formEl) return;
  formEl.resetFields();
  show.value = false;
  form.value = new <%=getBigModuleTitle(moduleConf.nameEn) %>Dto();
  initOtherValue(form.value);
  <% for(let i=0;i<fieldList.length;i++) {%>
    <%if(fieldList[i].dom=='MoreText'){%>
      const <%=fieldList[i].nameEn %>Editor = <%=fieldList[i].nameEn %>EditorRef.value;
      if (<%=fieldList[i].nameEn %>Editor == null) return;
      <%=fieldList[i].nameEn %>Editor.destroy();
    <%}%><%}%>
  
};

defineExpose({ open });
</script>
